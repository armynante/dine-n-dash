name: Deploy to DigitalOcean Kubernetes

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Log in to DigitalOcean Container Registry with short-lived credentials
      run: doctl registry login --expiry-seconds 1200

    - name: Remove old images from Container Registry
      uses: ripplr-io/docr-image-remove@v1
      with:
        image_repository: diner-server # required
        buffer_size: 5

    - name: Remove old images from Container Registry
      uses: ripplr-io/docr-image-remove@v1
      with:
        image_repository: diner-controller # required
        buffer_size: 5

    - name: Remove old images from Container Registry
      uses: ripplr-io/docr-image-remove@v1
      with:
        image_repository: diner-watcher # required
        buffer_size: 5

    - name: Remove old images from Container Registry
      uses: ripplr-io/docr-image-remove@v1
      with:
        image_repository: diner-web # required
        buffer_size: 5

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
  
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build and Push Docker image for Controller
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./apps/controller/Dockerfile
        push: true
        tags: registry.digitalocean.com/humidresearch/diner-controller:${{ github.sha }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache

    - name: Build and Push Docker image for Server
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./apps/server/Dockerfile
        push: true
        tags: registry.digitalocean.com/humidresearch/diner-server:${{ github.sha }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache

    - name: Build and Push Docker image for Watcher
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./apps/watcher/Dockerfile
        push: true
        tags: registry.digitalocean.com/humidresearch/diner-watcher:${{ github.sha }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache

    - name: Build and Push Docker image for Web
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./apps/web/Dockerfile
        push: true
        tags: registry.digitalocean.com/humidresearch/diner-web:${{ github.sha }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache

      # Update Deployment Files



    # # Build and Push Docker image for each service
    # - name: Build and Push Docker image for Controller
    #   run: |
    #     docker build -t registry.digitalocean.com/humidresearch/diner-controller:${{ github.sha }} -f ./apps/controller/Dockerfile . --push
        
    # - name: Build and Push Docker image for Server
    #   run: |
    #     docker build -t registry.digitalocean.com/humidresearch/diner-server:${{ github.sha }} -f ./apps/server/Dockerfile . --push

    # - name: Build and Push Docker image for Watcher
    #   run: |
    #     docker build -t registry.digitalocean.com/humidresearch/diner-watcher:${{ github.sha }} -f ./apps/watcher/Dockerfile . --push

    # - name: Build and Push Docker image for Web
    #   run: |
    #     docker build -t registry.digitalocean.com/humidresearch/diner-web:${{ github.sha }} -f ./apps/web/Dockerfile . --push

      # Update Deployment Files
    - name: Update server deployment file
      run: |
        TAG=$(echo $GITHUB_SHA | head -c7)
        echo "TAG: $TAG"
        cat $GITHUB_WORKSPACE/deployment/prod/apps/server/deployment.yaml
        sed -i 's|<IMAGE>|registry.digitalocean.com/humidresearch/diner-server:'${TAG}'|' $GITHUB_WORKSPACE/deployment/prod/apps/server/deployment.yaml
        cat $GITHUB_WORKSPACE/deployment/prod/apps/server/deployment.yaml
    
    - name: Update watcher deployment file
      run: TAG=$(echo $GITHUB_SHA | head -c7) && sed -i 's|<IMAGE>|registry.digitalocean.com/humidresearch/diner-watcher:'${TAG}'|' $GITHUB_WORKSPACE/deployment/prod/apps/watcher/deployment.yaml
    
    - name: Update controller deployment file
      run: TAG=$(echo $GITHUB_SHA | head -c7) && sed -i 's|<IMAGE>|registry.digitalocean.com/humidresearch/diner-controller:'${TAG}'|' $GITHUB_WORKSPACE/deployment/prod/apps/controller/deployment.yaml
    
    - name: Update web deployment file
      run: TAG=$(echo $GITHUB_SHA | head -c7) && sed -i 's|<IMAGE>|registry.digitalocean.com/humidresearch/diner-web:'${TAG}'|' $GITHUB_WORKSPACE/deployment/prod/apps/web/deployment.yaml

    - name: Save DigitalOcean kubeconfig with short-lived credentials
      run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 dine-n-dash-cluster
      
      # Deploy to Kubernetes
    - name: Deploy Controller to Kubernetes
      run: kubectl apply -f ./deployment/prod/apps/controller/deployment.yaml
      
    - name: Deploy Server to Kubernetes
      run: kubectl apply -f ./deployment/prod/apps/server/deployment.yaml
      
    - name: Deploy Watcher to Kubernetes
      run: kubectl apply -f ./deployment/prod/apps/watcher/deployment.yaml
      
    - name: Deploy Web to Kubernetes
      run: kubectl apply -f ./deployment/prod/apps/web/deployment.yaml

      # veryify deploy to Kubernetes
    - name: Get Web Deployment Status
      run: kubectl rollout status -f ./deployment/prod/apps/web/deployment.yaml

    - name: Get Controller Deployment Status
      run: kubectl rollout status -f ./deployment/prod/apps/controller/deployment.yaml

    - name: Get Server Deployment Status
      run: kubectl rollout status -f ./deployment/prod/apps/server/deployment.yaml

    - name: Get Watcher Deployment Status
      run: kubectl rollout status -f ./deployment/prod/apps/watcher/deployment.yaml
      

      
      